# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  orb-file:
    type: string
    default: "s3-cache.yml"
  orb-name:
    type: string 
    default: "vjpandian/s3-cache"

orbs:
  cli: circleci/circleci-cli@0.1.9
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  orb-publish-job:
    executor: cli/default
    steps:
      - checkout
      - cli/install
      - cli/setup:
            token: CIRCLE_TOKEN
      - run: 
          name: Fetch org information
          command: circleci info org
      - run: 
          name: Validate the Orb YAML Source Code
          command: circleci orb validate << pipeline.parameters.orb-file >>
      - run: 
          name: Test by Publishing a Dev Version
          command: circleci orb publish << pipeline.parameters.orb-file >> << pipeline.parameters.orb-name >>@dev:<< pipeline.git.revision >>
      - run:
          name: Trigger a test deployment with the dev version
          command: |
              curl -X POST https://circleci.com/api/v2/project/github/vjpandian/mac-runner-cache-test/pipeline \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header "content-type: application/json" \
              --data '{"branch":"orb-dev-version-test"}'
      - run: 
          name: Check if the triggered test deployment was successful
          command: |
             # Make a request to the CircleCI API to get the latest pipeline for the specified branch
             pipeline_status=$(curl -s -u "${CIRCLECI_TOKEN}:" "https://circleci.com/api/v2/project/github/vjpandian/mac-runner-cache-test/pipeline?branch=orb-dev-version-test" | jq -r '.items[0].state')
             sleep 5
             # Check the pipeline status and act accordingly
             if [ "$pipeline_status" = "success" ]; then
               echo "Pipeline is successful"
               exit 0
             elif [ "$pipeline_status" = "failed" ]; then
               echo "Pipeline has failed"
               exit 1
             else
               echo "Pipeline is in an unknown state: $pipeline_status"
               exit 2
             fi

      - run: 
          name: Promote the published Dev Version
          command: circleci orb publish promote << pipeline.parameters.orb-name >>@dev:<< pipeline.git.revision >> patch
 
workflows:
  orb-publish:
    jobs:
      - orb-publish-job:
           context: org-global
