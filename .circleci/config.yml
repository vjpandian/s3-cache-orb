# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  orb-file:
    type: string
    default: "s3-cache.yml"
  orb-name:
    type: string 
    default: "vjpandian/s3-cache"

orbs:
  cli: circleci/circleci-cli@0.1.9
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  orb-publish-job:
    executor: cli/default
    steps:
      - checkout
      - run:
          name: install jq
          command: curl -L -o /usr/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
      - cli/install
      - cli/setup:
            token: CIRCLE_TOKEN
      - run: 
          name: Fetch org information
          command: circleci info org
      - run: 
          name: Validate the Orb YAML Source Code
          command: circleci orb validate << pipeline.parameters.orb-file >>
      - run: 
          name: Test by Publishing a Dev Version
          command: circleci orb publish << pipeline.parameters.orb-file >> << pipeline.parameters.orb-name >>@dev:<< pipeline.git.revision >>
      - run:
          name: Trigger a test deployment with the dev version
          command: |
              curl -X POST https://circleci.com/api/v2/project/github/vjpandian/mac-runner-cache-test/pipeline \
              --header "Circle-Token: $CIRCLE_TOKEN" \
              --header "content-type: application/json" \
              --data '{"branch":"orb-dev-version-test"}'
      - run: 
          name: Check if triggered test deployment was successful
          command: |
                # Make an initial request to the CircleCI API to retrieve the pipeline information for the specified branch.
                pip=$(curl -s -H "Circle-Token: ${CIRCLECI_TOKEN}" "https://circleci.com/api/v2/project/gh/vjpandian/mac-runner-cache-test/pipeline?branch=orb-dev-version-test")
             
                # Extract the pipeline IDs and their corresponding commit revisions
                pipeline_ids=$(echo $pip | jq -r '.items[] | {"id": .id, "revision": .vcs.revision}' )
             
                echo ${pipeline_ids} | jq -c '.' | while read pip; do
                pip_id=$(echo $pip | jq -r '.id')
                pip_sha=$(echo $pip | jq -r '.revision')
                workflow=$(curl -H "Circle-Token: ${CIRCLECI_TOKEN}" https://circleci.com/api/v2/pipeline/$pip_id/workflow)
             
                # Check if any workflow item has a status of "success" 
                result=$(echo $workflow | jq -r '.items[] | select(.status == "success")')
             
                # If a successful status is found, print the commit SHA and exit the loop. Otherwise, indicate that a successful status was not found.
                if [[ -n "$result" ]]; then
                   echo "Successful status found. commit sha: $pip_sha"
                   break
                else
                   echo "Successful status not found."
                fi
                done

      - run: 
          name: Promote the published Dev Version
          command: circleci orb publish promote << pipeline.parameters.orb-name >>@dev:<< pipeline.git.revision >> patch
 
workflows:
  orb-publish:
    jobs:
      - orb-publish-job:
           context: org-global
